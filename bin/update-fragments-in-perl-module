#!/usr/bin/env perl

use 5.010001;
use strict;
use warnings;
use Devel::Confess;
use Log::ger;
use Log::ger::App;

use Cwd 'abs_path';
use Data::Dump;
use File::chdir;
use File::Slurper qw(read_text);
use FindBin '$Bin';
use Getopt::Long;
use Setup::File::TextFragment 'setup_text_fragment';
use String::ShellQuote;
use Text::CSV;
use Text::Fragment;
use YAML::XS qw(LoadFile);

my $script = $0;
$script =~ s!.+[/\\]!!;

my %opts;
GetOptions(
    'use-data-section!' => \$opts{use_data_section},
) or die "Error in GetOptions()";

die "Usage: $0 [options] <perl-module-file>\n" unless @ARGV == 1;
my ($mod_file) = @ARGV;

my $gudangdata_dir = "$Bin/..";
$mod_file = abs_path($mod_file);

# convert aos to hos
sub _row_as_hash {
    my ($aos, $meta) = @_;
    my $hos = {};
    for my $fname (keys %{ $meta->{fields} }) {
        my $f = $meta->{fields}{$fname};
        $hos->{$fname} = $aos->[ $f->{pos} ];
    }
    $hos;
}

CHECK_GUDANGDATA_DIR: {
    (-d $gudangdata_dir)
        or die "ERROR: $gudangdata_dir does not exist or not a dir\n";
    (-d "$gudangdata_dir/table")
        or die "ERROR: $gudangdata_dir/table does not exist or not a dir\n";
}

my $content = read_text($mod_file);
my $dss;
my %datas;
my %metas;
my %revs;
INSERT_FRAGMENTS: {
    $dss = do {
        log_trace "Will use __DATA__";
        require Data::Section::Seekable::Writer;
        Data::Section::Seekable::Writer->new;
    } if $opts{use_data_section};

    my $res = Text::Fragment::list_fragments(text => $content);
    die "ERROR: Can't list fragments in $mod_file: $res->[0] - $res->[1]\n" unless $res->[0] == 200;
    for my $f (@{ $res->[2] }) {
        next unless $f->{id} =~ /^(meta|data)-(\w+)$/;
        my $t = $2;
        my $is_meta = $1 eq 'meta';
        my $tabledir = "$gudangdata_dir/table/$t";
        (-d $tabledir)
            or die "ERROR: No such gudangdata table '$tabledir'\n";
        my $src_file;

        my $meta;
        GET_META: {
            $src_file = "meta.yaml" if $is_meta;
            $meta = $metas{$t};
            last if $meta;
            $meta = LoadFile("$tabledir/meta.yaml");
            $metas{$t} = $meta;
        }

        my $row_as_hash = $f->{attrs}{row_as_hash};

        my $data;
      GET_DATA: {
            next if $is_meta;
            my @rows;
            if (-f "$tabledir/data.csv") {
                $src_file = "data.csv" if !$is_meta;
                $data = $datas{$t};
                last if $data;
                my $csv = Text::CSV->new();
                open my $fh, "<:encoding(utf8)", "$tabledir/data.csv" or die "ERROR: Can't open $tabledir/data.csv: $!\n";
                if ($dss) {
                    log_trace "Adding CSV to DATA: $t";
                    $dss->add_part($t => join("", <$fh>));
                } else {
                    my $i = 0;
                    while (my $row = $csv->getline($fh)) {
                        next if $i++ == 0 && $meta->{header};
                        push @rows, $row_as_hash ? _row_as_hash($row, $meta) : $row;
                    }
                }
            } elsif (-f "$tabledir/data.tsv") {
                $src_file = "data.tsv" if !$is_meta;
                $data = $datas{$t};
                last if $data;
                open my $fh, "<:encoding(utf8)", "$tabledir/data.tsv" or die "ERROR: Can't open $tabledir/data.tsv: $!\n";
                my $csv = Text::CSV->new;
                my $i = 0;
                my $csv_lines = "";
                while (my $line = <$fh>) {
                    next if $i++ == 0 && $meta->{header};
                    $line =~ s/\r?\n\z//;
                    my $row = [split /\t/, $line];
                    if ($dss) {
                        $csv->combine(@$row);
                        $csv_lines .= $csv->string . "\n";
                    } else {
                        push @rows, $row_as_hash ? _row_as_hash($row, $meta) : $row;
                    }
                }
                if ($dss) {
                    log_trace "Adding TSV as CSV to DATA: $t";
                    $dss->add_part($t => $csv_lines);
                }
            } else {
                die "ERROR: No data.tsv or data.csv in $tabledir\n";
            }
            $datas{$t} = \@rows;
        }

        $revs{$t} //= do {
            local $CWD = $tabledir;
            my $output = `${\("git log -1 ".shell_quote($src_file))}`;
            $output =~ /^commit (\w+)/
                or die "ERROR: Can't parse commit ID from 'git log $src_file' output\n";
            my $rev = $1;
            $output =~ /^Date:\s*(.+)/m
                or die "ERROR: Can't parse date from 'git log $src_file' output\n";
            my $date = $1;
            "$rev ($date)";
        };

        my $varname = $f->{attrs}{varname} // ($is_meta ? 'meta' : 'data');

        my $mtime_varname = $f->{attrs}{mtime_varname};
        my ($date, $mtime);
        if (defined $mtime_varname) {
            require Date::Parse;
            $revs{$t} =~ /\((.+)\)/ or die "ERROR: Can't extract date/time from revision '$revs{$t}'\n";
            $date = $1;
            $mtime = Date::Parse::str2time($date);
            defined($mtime) or die "ERROR: Can't parse date/time '$date'\n";
        }

        my $payload = join(
            "",
            "# note: This fragment's content is generated by a script. Do not edit manually!\n",
            "# src-file: $tabledir/$src_file\n",
            "# src-revision: ", $revs{$t}, "\n",
            "# generate-date: ", scalar(gmtime), " UTC\n",
            "# generated-by: ", $script, "\n",
            "our \$$varname = ",
            ($dss && !$is_meta ?
                 ("do { require Data::Section::Seekable::Reader; require Text::CSV; our \$dss; \$dss //= Data::Section::Seekable::Reader->new; my \$ct = \$dss->read_part(",Data::Dump::dump($t),"); my \$aoa = Text::CSV::csv(in => \\\$ct); \$aoa }") :
                 (Data::Dump::dump($is_meta ? $metas{$t} : $datas{$t}))
             ), ";\n",
            (defined $mtime_varname ? "our \$$mtime_varname = $mtime; # $date\n" : ""),
        );
        my $res = Text::Fragment::insert_fragment(text => $content, id => $f->{id}, payload => $payload);
        die "Cannot set fragment id=$f->{id}: $res->[0] - $res->[1]\n" unless $res->[0] =~ /^(200|304)$/;
        $content = $res->[2]{text};
    } # for each fragment

    if ($dss) {
        $content =~ s/^(__DATA__|__END__)\R.*//ms;
        $content .= "__DATA__\n$dss";
    }
}

WRITE_MOD_FILE: {
    open my $fh, ">", $mod_file or die "ERROR: Can't open $mod_file for writing: $!\n";
    print $fh $content;
    close $fh;
}

=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 OPTIONS

=head2 --use-data-section

If set, will put the data as CSV in __DATA__ section instead of as Perl data
structure. This will help improve script parsing speed as well as syntax
highlighting in editors, particularly with bigger data, but will require
L<Data::Section::Seekable> and L<Text::CSV> during runtime). Please make sure,
if your script has a POD, to add C<=cut> at the end, to allow the start of data.
